/*
	Database Initialization for NUS-ISS Design Project
*/

-- Table removal if it exists
DROP TRIGGER IF EXISTS after_booking_change ON T_BOOKINGS;
DROP FUNCTION IF EXISTS log_booking_action();
DROP TABLE IF EXISTS T_BOOKING_LOGS;
DROP TABLE IF EXISTS T_BOOKINGS;
DROP TABLE IF EXISTS T_ROOMS;
DROP TABLE IF EXISTS T_USERS;
DROP TABLE IF EXISTS T_ROLES;

/*
	User Roles & Account (Using SERIAL for auto increment) (Probably can just use 1 table)
*/
-- Roles (Base Table)
CREATE TABLE T_ROLES (
    ROLE_ID SERIAL PRIMARY KEY,
    ROLE_NAME VARCHAR(50) NOT NULL UNIQUE,
    ROLE_DESCRIPTION TEXT,
    CREATED_ON TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    UPDATED_ON TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Insert base roles
INSERT INTO T_ROLES (ROLE_NAME, ROLE_DESCRIPTION)
VALUES ('Admin', 'Administrator'),
       ('Lecturer', 'Lecturer'),
       ('Student', 'Student');

-- Account (FK - T_ROLES)
CREATE TABLE T_USERS (
    USER_ID SERIAL PRIMARY KEY,
    USER_EMAIL VARCHAR(255) NOT NULL UNIQUE,
    USER_FULL_NAME VARCHAR(255) NOT NULL,
    USER_PASSWORD VARCHAR(255) NOT NULL,
    USER_ROLE_ID INTEGER NOT NULL,
    CREATED_ON TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    UPDATED_ON TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    FOREIGN KEY (USER_ROLE_ID) REFERENCES T_ROLES(ROLE_ID) ON DELETE RESTRICT ON UPDATE CASCADE
);

/*
	Room and Bookings (Using SERIAL for auto increment)
*/
-- Rooms (Base Table)
CREATE TABLE T_ROOMS (
    ROOM_ID SERIAL PRIMARY KEY,
    ROOM_NAME VARCHAR(255) NOT NULL,
    ROOM_SEATING_CAPACITY INTEGER NOT NULL DEFAULT 0,
    ROOM_TYPE VARCHAR(100) NOT NULL,
    BUILDING_NAME VARCHAR(100) NOT NULL,
--     FLOOR VARCHAR(50) NOT NULL,
--     ROOM_NUMBER VARCHAR(50) NOT NULL,
--     ROOM_EQUIPMENT JSONB,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_ON TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    UPDATED_ON TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (BUILDING_NAME, ROOM_NAME)
);

-- Bookings (FK - T_ROOMS, FK - T_USERS)
CREATE TABLE T_BOOKINGS (
    BOOKING_ID SERIAL PRIMARY KEY,
    USER_ID INTEGER NOT NULL,
    ROOM_ID INTEGER NOT NULL,
    START_TIME TIMESTAMP WITH TIME ZONE NOT NULL,
    END_TIME TIMESTAMP WITH TIME ZONE NOT NULL,
    BOOKING_PURPOSE VARCHAR(255),
--     BOOKING_STATUS VARCHAR(50) NOT NULL DEFAULT 'pending',
  	IS_ACTIVE BOOLEAN DEFAULT TRUE, -- 'BOOKED' or 'CANCELED'
    CREATED_ON TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    UPDATED_ON TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES T_USERS(USER_ID) ON DELETE RESTRICT ON UPDATE CASCADE,
    FOREIGN KEY (ROOM_ID) REFERENCES T_ROOMS(ROOM_ID) ON DELETE RESTRICT ON UPDATE CASCADE
);

/*
	Trigger - Audit transactions
*/
-- Usage Reports Table
CREATE TABLE T_BOOKING_LOGS (
    LOG_ID SERIAL PRIMARY KEY,
    BOOKING_ID INTEGER NOT NULL,
    USER_ID INTEGER NOT NULL,
    ROOM_ID INTEGER NOT NULL,
    ACTION_TYPE VARCHAR(50) NOT NULL, -- 'BOOKED' or 'CANCELED'
    CREATED_ON TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (BOOKING_ID) REFERENCES T_BOOKINGS(BOOKING_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Trigger for booking logs
CREATE OR REPLACE FUNCTION log_booking_action()
RETURNS TRIGGER AS $$
BEGIN
    -- Log when a new booking is created
    IF TG_OP = 'INSERT' THEN
        INSERT INTO T_BOOKING_LOGS (BOOKING_ID, USER_ID, ROOM_ID, ACTION_TYPE)
        VALUES (NEW.BOOKING_ID, NEW.USER_ID, NEW.ROOM_ID, 'BOOKED');
    
    -- Log when a booking is canceled (IS_ACTIVE changes to FALSE)
    ELSIF TG_OP = 'UPDATE' AND OLD.IS_ACTIVE = TRUE AND NEW.IS_ACTIVE = FALSE THEN
        INSERT INTO T_BOOKING_LOGS (BOOKING_ID, USER_ID, ROOM_ID, ACTION_TYPE)
        VALUES (NEW.BOOKING_ID, NEW.USER_ID, NEW.ROOM_ID, 'CANCELED');
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER after_booking_change
AFTER INSERT OR UPDATE ON T_BOOKINGS
FOR EACH ROW
EXECUTE FUNCTION log_booking_action();