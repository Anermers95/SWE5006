name: Run Tests on Staging and Upload Coverage

on:
  push:
    branches:
      - staging

jobs:
  Build-App:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }} 
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & run Docker Compose then await Database Connection
        env:
          DATABASE_USER: ${{ secrets.DATABASE_USER }}
          DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DB_PORT: ${{ secrets.DB_PORT }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN }}
          GMAIL_HOST: ${{ secrets.GMAIL_HOST }}
          GMAIL_USER: ${{ secrets.GMAIL_USER }}
          GMAIL_PASS: ${{ secrets.GMAIL_PASS }}
        run: |
          docker-compose -f docker-compose.yml up -d --build
          docker-compose logs
          echo "Waiting for Database connection..."
          
          MAX_RETRIES=12  # Waits up to 60 seconds (12 retries * 5 seconds)
          RETRY_COUNT=0

          while ! docker-compose logs | grep -q "Connected to PostgreSQL"; do
            if docker-compose logs | grep -q "Database connection error"; then
              echo "❌ Database connection failed. Stopping GitHub Actions."
              exit 1  # This will stop GitHub Actions with a failure
            fi

            if [ "$RETRY_COUNT" -ge "$MAX_RETRIES" ]; then
              echo "❌ Timed out waiting for DB connection. Stopping GitHub Actions."
              exit 1
            fi

            echo "⏳ Waiting for DB connection... (Attempt $((RETRY_COUNT+1))/$MAX_RETRIES)"
            sleep 5
            RETRY_COUNT=$((RETRY_COUNT+1))
          done

          echo "✅ Database connection established."
          
      - name: Shut down Docker Compose
        run: |
          docker-compose down

  Staging-Build-and-Test-Backend:
    needs: Build-App
    runs-on: ubuntu-latest
    env:
      DATABASE_USER: ${{ secrets.DATABASE_USER }}
      DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
      DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      DB_PORT: ${{ secrets.DB_PORT }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN }}
      GMAIL_HOST: ${{ secrets.GMAIL_HOST }}
      GMAIL_USER: ${{ secrets.GMAIL_USER }}
      GMAIL_PASS: ${{ secrets.GMAIL_PASS }}
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          cd backend
          npm install

      - name: Run tests with coverage
        run: |
          cd backend
          npm run test

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ./backend/coverage
          retention-days: 7

