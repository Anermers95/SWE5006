name: Build and Test Docker Compose

on:
  push:
    branches:
      - release  # branch for the release (Runs when the code is merged into release)
  # pull_request:
  #   branches:
  #     - release  # trigger on PR to the release branch

jobs:
  build-and-test:
    runs-on: ubuntu-latest  # Ubuntu for now can change to different one

    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}  # Add your Docker Hub username to GitHub Secrets
          password: ${{ secrets.DOCKERHUB_TOKEN }}  # Add your Docker Hub token to GitHub Secrets

      - name: Build and run Docker Compose
        run: |
          docker-compose -f docker-compose.yml up -d --build
          docker-compose logs

      - name: Push Docker images to Docker Hub
        run: |
          docker-compose -f docker-compose.yml push

      # - name: Run tests
      #   run: |
      #     # Replace this with your actual test command (e.g., inside the container)
      #     docker-compose exec <your-service-name> npm run test
          
      - name: Shut down Docker Compose
        run: |
          docker-compose down
    
  snyk_scan:
    needs: build-and-test  # Runs after successful build and test
    runs-on: ubuntu-latest
    steps:   
    - name: Run Snyk to check backend Docker image for vulnerabilities
      uses: snyk/actions/docker@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ${{ secrets.DOCKERHUB_USERNAME }}/backend:0.1

    - name: Run Snyk to check frontend Docker image for vulnerabilities
      uses: snyk/actions/docker@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ${{ secrets.DOCKERHUB_USERNAME }}/frontend:0.1

    - name: Delete frontend image from Docker Hub
      run: |
        IMAGE_NAME="vinetage/frontend"
        TAG="0.1"
        curl -X DELETE "https://hub.docker.com/v2/repositories/${IMAGE_NAME}/tags/${TAG}/" \
             -H "Authorization: Bearer ${{ secrets.DOCKERHUB_TOKEN }}"

    - name: Delete backend image from Docker Hub
      run: |
        IMAGE_NAME="vinetage/backend"
        TAG="0.1"
        curl -X DELETE "https://hub.docker.com/v2/repositories/${IMAGE_NAME}/tags/${TAG}/" \
             -H "Authorization: Bearer ${{ secrets.DOCKERHUB_TOKEN }}"
