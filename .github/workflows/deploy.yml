name: Automatic Deployment to EC2

on:
    workflow_run:
      workflows: ["Project Release Workflow"]
      types:
        - completed

jobs:
  deploy-to-ec2:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    environment:
      name: EC2_Deployment
    steps:
      - name: Set up AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -o awscliv2.zip
          sudo ./aws/install --update

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terminate existing EC2 instance (if any)
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=nus-swe5006" "Name=instance-state-name,Values=running,pending" \
            --query "Reservations[*].Instances[*].InstanceId" \
            --output text)
      
          if [ -n "$INSTANCE_ID" ]; then
            echo "Terminating existing instance: $INSTANCE_ID"
            aws ec2 terminate-instances --instance-ids $INSTANCE_ID
            aws ec2 wait instance-terminated --instance-ids $INSTANCE_ID
          else
            echo "No existing instance found."
          fi

      - name: Launch EC2 Instance
        id: launch
        run: |
          AMI_ID=$(aws ec2 describe-images --owners amazon \
            --filters "Name=name,Values=ubuntu/images/hvm-ssd-gp3/ubuntu-noble-24.04-amd64-server-*" \
            --query 'Images[*].[ImageId,CreationDate]' \
            --output text | sort -k2 -r | head -n1 | awk '{print $1}')

          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id $AMI_ID \
            --instance-type t2.micro \
            --key-name ${{ secrets.EC2_KEY_PAIR_NAME }} \
            --security-groups launch-wizard-2 \
            --query 'Instances[0].InstanceId' \
            --output text)

          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          
          # Tag the instance
          aws ec2 create-tags --resources $INSTANCE_ID --tags Key=Name,Value=nus-swe5006

          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text)

          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Save PEM file
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PEM_FILE }}" > ~/.ssh/ec2-key.pem
          chmod 600 ~/.ssh/ec2-key.pem

      - name: Wait for EC2 to be reachable
        run: |
          echo "Waiting for SSH at $PUBLIC_IP..."
          for i in {1..15}; do
            ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2-key.pem ubuntu@$PUBLIC_IP 'echo ready' && break
            echo "Retrying SSH..."
            sleep 10
          done

      - name: Deploy app on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2-key.pem ubuntu@$PUBLIC_IP << 'EOF'
            export PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
            sudo apt update
            sudo apt install -y docker.io docker-compose git
            sudo usermod -a -G docker ubuntu
            id ubuntu
            newgrp docker
            git clone -b release https://${{ secrets.GH_DEPLOY_TOKEN }}@github.com/${{ github.repository }} app
            cd app
            sed -i 's|VITE_API_URL=http://localhost:3000|VITE_API_URL=http://'"$PUBLIC_IP"':3000|' frontend/.env
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            docker-compose up -d --build
          EOF
          
      - name: Display deployed app URL
        run: |
          echo "## 🌐 Deployed Web App URL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[Visit App](http://$PUBLIC_IP:5173)" >> $GITHUB_STEP_SUMMARY